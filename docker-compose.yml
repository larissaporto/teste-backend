version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.0
    networks: 
      - broker-kafka
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:5.5.0
    networks: 
      - broker-kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,EXTERNAL://kafka:9092,EXTERNAL2://kafka:9093,EXTERNAL3://kafka:9094,EXTERNAL4://kafka:9095
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT,EXTERNAL2:PLAINTEXT,EXTERNAL3:PLAINTEXT,EXTERNAL4:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_CREATE_TOPICS: order-topic:3:1

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    networks: 
      - broker-kafka
    depends_on:
      - kafka
    ports:
      - 19000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:29092

  rails:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: teste_backend_app
    environment:
      DB_HOST: mongo
    volumes:
      - .:/teste-backend
    depends_on:
      - zookeeper
      - kafka
      - kafdrop
      - mongo
    networks: 
      - broker-kafka
    ports:
      - 3000:3000
  
  mongo:
    image: mongo
    restart: always
    #environment:
      # MONGO_INITDB_ROOT_USERNAME: root
      # MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongo-data:/data/db
    networks: 
      - broker-kafka

  mongo-express:
    image: mongo-express
    restart: always
    networks: 
      - broker-kafka
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/

networks:
  broker-kafka:
    driver: bridge

volumes:
  mongo-data: